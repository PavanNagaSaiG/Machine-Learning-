# -*- coding: utf-8 -*-
"""ML_Assignment-4_700745501_CRN_23921.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wx-IZcnLjLP79cywkjl1unjkr9Z5mhWx
"""

import pandas as pd
data_set = pd.read_csv('/content/data.csv')
data_set.describe() 
#describe function is used to describe the data

data_set.isnull().any()  
#checking the null values if any in the datasets and returned the boolean values as result

#replacing the null values using the mean values
data_set.fillna(data_set.mean(), inplace=True) 
# used inplace to make the changes in data to be persistence across this execution.
data_set.isnull().any()

data_set.agg({'Duration':['min','max','count','mean'],'Maxpulse':['min','max','count','mean']}) # used the agg function to aggregate the data for 2 columns



data_set.loc[(data_set['Calories']>500)&(data_set['Calories']<1000)] 
# used the loc function to group the data set according to the condition given for Calories column/label

data_set.loc[(data_set['Calories']>500)&(data_set['Pulse']<100)] # used the loc function to group the data set according to the condition given for Calories column/label

df_modified = data_set[['Duration','Pulse','Calories']]  
# excluded the Maxpulse column from the dataset
df_modified.head() 
#printing the top overview of data set in df_modified

del data_set['Maxpulse']    #deleting the label/column Maxpulse from the dataset
display (data_set)

data_set.dtypes  #before the conversion of data type for the value in data set
data_set['Calories'] = data_set['Calories'].astype(int)  # applied conversion of data type for the data in label Calories
data_set.dtypes  #display after conversion

data_set.plot.scatter(x='Duration',y='Calories',c='red') # displaying the pictorial plot for two column(Duration and calories)

# importing libraries all needed

import pandas as pd
import seaborn as sns
from sklearn import preprocessing
import matplotlib.pyplot as plt
df=pd.read_csv("/content/train.csv")
# Below we are Finding the correlation between ‘survived’ (target column) and ‘sex’ column for the Titanic use case

le = preprocessing.LabelEncoder()
df['Sex'] = le.fit_transform(df.Sex.values)
df['Survived'].corr(df['Sex'])

matrix = df.corr()  #corelations
display(matrix)

# visualizations(1) for above correlations

df.corr().style.background_gradient(cmap="Blues")

# visualizations(2) for above correlations

sns.heatmap(matrix, annot=True, vmax=1, vmin=-1, center=0, cmap='pink')
plt.show()

# Implementing Naïve Bayes methods ,,,,1.3.1

train_raw = pd.read_csv('/content/train.csv')
test_raw = pd.read_csv('/content/test.csv')

# Join data to analyse and process the set as one.
train_raw['train'] = 1
test_raw['train'] = 0
df = train_raw.append(test_raw, sort=False)




features = ['Age', 'Embarked', 'Fare', 'Parch', 'Pclass', 'Sex', 'SibSp']
target = 'Survived'

df = df[features + [target] + ['train']]
# Categorical values need to be transformed into numeric.
df['Sex'] = df['Sex'].replace(["female", "male"], [0, 1])
df['Embarked'] = df['Embarked'].replace(['S', 'C', 'Q'], [1, 2, 3])
train = df.query('train == 1')
test = df.query('train == 0')

#1.3.2
classifier = GaussianNB()
classifier.fit(X_train, Y_train)
y_pred = classifier.predict(X_val)

# Summary of the predictions made by the classifier
print(classification_report(Y_val, y_pred))
print(confusion_matrix(Y_val, y_pred))
# Accuracy score
from sklearn.metrics import accuracy_score
display('accuracy is',accuracy_score(Y_val, y_pred))

"""# 2. (Glass Dataset)


"""

#question 2 starts # Reading file from glass csv data file from current directory
glass=pd.read_csv("/content/glass.csv")

#2.1.b
#2.2
from sklearn.naive_bayes import GaussianNB 
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
features = ['Rl', 'Na', 'Mg', 'Al', 'Si', 'K', 'Ca', 'Ba', 'Fe']
target = 'Type'


X_train, X_val, Y_train, Y_val = train_test_split(glass[::-1], glass['Type'],test_size=0.2, random_state=1)

classifier = GaussianNB()

classifier.fit(X_train, Y_train)
y_pred = classifier.predict(X_val)
# Summarizing of the predictions made by the classifier
print(classification_report(Y_val, y_pred))
print(confusion_matrix(Y_val, y_pred))
# Accuracy score
from sklearn.metrics import accuracy_score #2.1.1,2
display('accuracy is',accuracy_score(Y_val, y_pred))

#2nd part 2nd question
from sklearn.svm import SVC, LinearSVC

classifier = LinearSVC()

classifier.fit(X_train, Y_train)


y_pred = classifier.predict(X_val)

# Summary of the predictions made by the classifier
print(classification_report(Y_val, y_pred))
print(confusion_matrix(Y_val, y_pred))
# Accuracy score
from sklearn.metrics import accuracy_score
display('accuracy is',accuracy_score(Y_val, y_pred))

#last ans in 2nd question #visualization1
glass.corr().style.background_gradient(cmap="Reds")

#visualization 2
sns.heatmap(matrix, annot=True, vmax=1, vmin=-1, center=0, cmap='vlag')
plt.show()

matrix = glass.corr()  #corelations of glass data
display(matrix)